Flip Plan:
==========

needs:

- sheets
- history/back-stack management
- navigation
- handy annotations for sheets
- state saving and restoring
   serialize history/back-stack
   serialize inner widget state
- separation between view and controller/presenter

wants:
 - provide activity sub class to manage single container of any type
    do not assume a single pane container

Sheets:
 - are an extension of a ViewGroup/FrameLayout
 - have basic lifecycle management methods
 - are dynamically inserted/removed from a flip container (folder? cabinet?)
 - can contain sheet containers
   - there should only be one main history tracker, so it can not be a integral part
      of the container code. history class of some sort?

Container:
 - contains one or more Sheets
 - can be subclassed to do a sliding pager, or side-by-side pane layout, etc

History:
 - back and forward options?
    treat it like a undo/redo stack?
 - potentially have a extensible History implementation
    it could allow providing a "history" object to the main container
    and a custom tracker could do things like wrap an adapter or cursor type thing
    to dynamically traverse the "Stack"
 - each element in the stack should not just be a single sheet change
    it must be able to track multiple sheets, including embeded sheets.
    each element will be a group of changes

MV*
 - view: Container/Desk/Whatever, Sheet
 - presenter/controller: Presenter  (think of something...)


 book, binder, folder, folio, workbook, ledger (this for the thing that keeps track of all the sheets?),

 API:

 Core object is the Ledger, that manages the state of the containers and sheets
 View object is a Sheet, it contains the raw view's of the display, and can handle some basic lifecycle bits
 Presenter object contains the actual behavior logic

 Questions:

 - Why is the presenter a direct part of the API? Why would the main API need to hold onto it?
 - What is the logic flow like? What is the life cycle like?
 - What is the Ledger's job?
 - What kind of information does the Ledger need to do its job?
 - Is a separate Container object necessary to do nested sheets? Is it necessary at all?
 - Assuming we have support for nested sheets, and grouped state changes, what does that make the api
    and data stored look like?

